ANNOUNCEMENTS API DOCUMENTATION
=====================================

This document outlines all API endpoints for announcements management with role-based access control.

BASE URL: /api/announcements

=============================================================================
ALUMNI ROUTES (Restricted to alumni users only)
=============================================================================

GET /api/announcements/summary
------------------------------
Description: Get announcements engagement summary/statistics for the authenticated alumni user
Authentication: Required (Alumni only)
Method: GET

Response:
{
  "totalAnnouncements": 45,
  "likedAnnouncements": 12,
  "commentedAnnouncements": 8,
  "recentActivity": 5,
  "categoryBreakdown": {
    "general": 15,
    "jobs": 10,
    "news": 8,
    "scholarships": 5,
    "events": 4,
    "achievements": 2,
    "obituary": 1
  }
}

=============================================================================
PUBLIC ROUTES (Accessible to all users)
=============================================================================

GET /api/announcements
----------------------
Description: Get all published announcements with filtering and pagination
Authentication: Optional
Method: GET

Query Parameters:
- page (number, optional): Page number (default: 1)
- limit (number, optional): Items per page (default: 20, max: 100)
- category (string, optional): Filter by category (general|jobs|news|scholarships|events|achievements|obituary)
- priority (string, optional): Filter by priority (low|medium|high|urgent)
- search (string, optional): Text search in title and content

Example: GET /api/announcements?category=jobs&priority=high&page=1&limit=10

Response:
{
  "announcements": [
    {
      "_id": "64f5b8c123456789abcdef01",
      "title": "New Job Opportunities Available",
      "content": "Exciting job opportunities...",
      "category": "jobs",
      "author": {
        "_id": "64f5b8c123456789abcdef02",
        "firstName": "John",
        "lastName": "Doe"
      },
      "priority": "high",
      "status": "published",
      "publishDate": "2024-01-15T10:00:00.000Z",
      "engagement": {
        "views": 150,
        "likes": [/* like objects */],
        "comments": [/* comment objects */]
      },
      "isPinned": false,
      "createdAt": "2024-01-15T09:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 45,
    "pages": 5
  }
}

GET /api/announcements/:id
--------------------------
Description: Get specific announcement by ID (increments view count)
Authentication: Optional
Method: GET

Parameters:
- id (string): Announcement ID

Response:
{
  "_id": "64f5b8c123456789abcdef01",
  "title": "Important Announcement",
  "content": "This is an important announcement...",
  "category": "general",
  "author": {
    "firstName": "Jane",
    "lastName": "Smith"
  },
  "engagement": {
    "views": 151,
    "likes": [/* populated like objects */],
    "comments": [/* populated comment objects with replies */]
  },
  // ... other fields
}

POST /api/announcements/:id/like
--------------------------------
Description: Like or unlike an announcement
Authentication: Required
Method: POST

Parameters:
- id (string): Announcement ID

Response:
{
  "message": "Announcement liked",
  "likeCount": 25
}

POST /api/announcements/:id/comments
-----------------------------------
Description: Add a comment to an announcement
Authentication: Required
Method: POST

Parameters:
- id (string): Announcement ID

Request Body:
{
  "content": "This is a great announcement!"
}

Response:
{
  "message": "Comment added successfully",
  "comment": {
    "_id": "64f5b8c123456789abcdef03",
    "user": {
      "_id": "64f5b8c123456789abcdef04",
      "firstName": "Alice",
      "lastName": "Johnson"
    },
    "content": "This is a great announcement!",
    "createdAt": "2024-01-15T11:00:00.000Z",
    "replies": []
  }
}

POST /api/announcements/:id/comments/:commentId/replies
------------------------------------------------------
Description: Reply to a comment on an announcement
Authentication: Required
Method: POST

Parameters:
- id (string): Announcement ID
- commentId (string): Comment ID

Request Body:
{
  "content": "I agree with your comment!"
}

Response:
{
  "message": "Reply added successfully",
  "reply": {
    "_id": "64f5b8c123456789abcdef05",
    "user": {
      "_id": "64f5b8c123456789abcdef06",
      "firstName": "Bob",
      "lastName": "Wilson"
    },
    "content": "I agree with your comment!",
    "createdAt": "2024-01-15T11:30:00.000Z"
  }
}

=============================================================================
ADMIN ROUTES (Restricted to admin/moderator users only)
=============================================================================

GET /api/announcements/admin
----------------------------
Description: Get all announcements with advanced filtering and admin statistics
Authentication: Required (Admin/Moderator only)
Method: GET

Query Parameters:
- page (number, optional): Page number (default: 1)
- limit (number, optional): Items per page (default: 20, max: 100)
- category (string, optional): Filter by category
- status (string, optional): Filter by status (draft|published|archived)
- priority (string, optional): Filter by priority
- author (string, optional): Filter by author ID
- search (string, optional): Text search
- sortBy (string, optional): Sort field (createdAt|publishDate|views|likes|comments|title)
- sortOrder (string, optional): Sort order (asc|desc)
- dateFrom (string, optional): Filter from date (ISO 8601)
- dateTo (string, optional): Filter to date (ISO 8601)

Example: GET /api/announcements/admin?status=published&sortBy=views&sortOrder=desc

Response:
{
  "announcements": [
    {
      "_id": "64f5b8c123456789abcdef01",
      "title": "Important Announcement",
      "category": "general",
      "author": {
        "_id": "64f5b8c123456789abcdef02",
        "firstName": "John",
        "lastName": "Doe",
        "role": "admin"
      },
      "status": "published",
      "priority": "high",
      "engagement": {
        "views": 150,
        "likes": [/* like objects */],
        "comments": [/* comment objects */]
      },
      "stats": {
        "likes": 25,
        "comments": 8,
        "views": 150,
        "totalEngagement": 33
      },
      "isPinned": false,
      "publishDate": "2024-01-15T10:00:00.000Z",
      "createdAt": "2024-01-15T09:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 45,
    "pages": 3
  }
}

POST /api/announcements/admin
-----------------------------
Description: Create a new announcement
Authentication: Required (Admin/Moderator only)
Method: POST

Request Body:
{
  "title": "New Announcement Title",
  "content": "This is the announcement content...",
  "category": "general",
  "priority": "medium",
  "status": "published",
  "publishDate": "2024-01-20T10:00:00.000Z",
  "expiryDate": "2024-02-20T10:00:00.000Z",
  "isPinned": false,
  "targetAudience": {
    "graduationYears": [2020, 2021, 2022],
    "locations": ["New York", "California"],
    "roles": ["alumni"],
    "isPublic": true
  }
}

Response:
{
  "message": "Announcement created successfully",
  "announcement": {
    "_id": "64f5b8c123456789abcdef01",
    "title": "New Announcement Title",
    "content": "This is the announcement content...",
    "category": "general",
    "author": {
      "_id": "64f5b8c123456789abcdef02",
      "firstName": "John",
      "lastName": "Doe"
    },
    "priority": "medium",
    "status": "published",
    "publishDate": "2024-01-20T10:00:00.000Z",
    "expiryDate": "2024-02-20T10:00:00.000Z",
    "isPinned": false,
    "createdAt": "2024-01-15T09:00:00.000Z",
    "updatedAt": "2024-01-15T09:00:00.000Z"
  }
}

GET /api/announcements/admin/:id
--------------------------------
Description: Get detailed announcement information with admin statistics
Authentication: Required (Admin/Moderator only)
Method: GET

Parameters:
- id (string): Announcement ID

Response:
{
  "_id": "64f5b8c123456789abcdef01",
  "title": "Important Announcement",
  "content": "This is an important announcement...",
  "category": "general",
  "author": {
    "_id": "64f5b8c123456789abcdef02",
    "firstName": "John",
    "lastName": "Doe",
    "role": "admin",
    "email": "john.doe@example.com"
  },
  "engagement": {
    "views": 150,
    "likes": [/* populated like objects */],
    "comments": [/* populated comment objects with replies */]
  },
  "stats": {
    "likes": 25,
    "comments": 8,
    "replies": 12,
    "views": 150,
    "totalEngagement": 33,
    "engagementRate": "22.00"
  },
  // ... other fields
}

PUT /api/announcements/admin/:id
--------------------------------
Description: Update an announcement
Authentication: Required (Admin/Moderator only)
Method: PUT

Parameters:
- id (string): Announcement ID

Request Body:
{
  "title": "Updated Announcement Title",
  "content": "Updated content...",
  "category": "news",
  "priority": "high",
  "status": "published",
  "isPinned": true
}

Response:
{
  "message": "Announcement updated successfully",
  "announcement": {
    // Updated announcement object
  }
}

DELETE /api/announcements/admin/:id
-----------------------------------
Description: Delete an announcement
Authentication: Required (Admin only)
Method: DELETE

Parameters:
- id (string): Announcement ID

Response:
{
  "message": "Announcement deleted successfully"
}

POST /api/announcements/admin/bulk
----------------------------------
Description: Perform bulk operations on multiple announcements
Authentication: Required (Admin/Moderator only)
Method: POST

Request Body:
{
  "action": "publish",
  "announcementIds": ["64f5b8c123456789abcdef01", "64f5b8c123456789abcdef02"]
}

Actions: publish, archive, delete, pin, unpin

Response:
{
  "message": "Bulk publish completed successfully",
  "modifiedCount": 2,
  "matchedCount": 2
}

GET /api/announcements/admin/export
-----------------------------------
Description: Export announcements data
Authentication: Required (Admin/Moderator only)
Method: GET

Query Parameters:
- format (string, optional): Export format (csv|json) (default: json)
- category (string, optional): Filter by category
- status (string, optional): Filter by status
- dateFrom (string, optional): Filter from date (ISO 8601)
- dateTo (string, optional): Filter to date (ISO 8601)

Example: GET /api/announcements/admin/export?format=csv&status=published

Response: File download (CSV or JSON)

GET /api/announcements/admin/statistics
---------------------------------------
Description: Get comprehensive announcement statistics and analytics
Authentication: Required (Admin/Moderator only)
Method: GET

Response:
{
  "overview": {
    "totalAnnouncements": 150,
    "totalViews": 5420,
    "totalLikes": 890,
    "totalComments": 234,
    "averageEngagement": "7.49"
  },
  "breakdowns": {
    "status": {
      "published": 120,
      "draft": 25,
      "archived": 5
    },
    "category": {
      "general": {
        "count": 45,
        "averageViews": 36,
        "totalEngagement": 125
      },
      "jobs": {
        "count": 30,
        "averageViews": 42,
        "totalEngagement": 98
      },
      // ... other categories
    },
    "priority": {
      "high": 25,
      "medium": 85,
      "low": 40
    }
  },
  "recentActivity": [
    {
      "_id": "2024-01-15",
      "count": 5
    },
    {
      "_id": "2024-01-16",
      "count": 3
    }
    // ... last 30 days
  ],
  "topAnnouncements": [
    {
      "_id": "64f5b8c123456789abcdef01",
      "title": "Most Engaging Announcement",
      "category": "general",
      "author": {
        "firstName": "John",
        "lastName": "Doe"
      },
      "views": 250,
      "likes": 45,
      "comments": 12,
      "engagementScore": 865
    }
    // ... top 10 announcements
  ]
}

=============================================================================
LEGACY ROUTES (For backward compatibility)
=============================================================================

POST /api/announcements
-----------------------
Description: Create announcement (legacy route)
Authentication: Required (Admin/Moderator only)
Method: POST

PUT /api/announcements/:id
--------------------------
Description: Update announcement (legacy route)
Authentication: Required (Admin/Moderator only)
Method: PUT

DELETE /api/announcements/:id
-----------------------------
Description: Delete announcement (legacy route)
Authentication: Required (Admin/Moderator only)
Method: DELETE

=============================================================================
ERROR CODES
=============================================================================

400 Bad Request - Invalid input data or validation errors
401 Unauthorized - Authentication required
403 Forbidden - Insufficient permissions
404 Not Found - Announcement not found
500 Internal Server Error - Server error

=============================================================================
VALIDATION RULES
=============================================================================

Announcement Creation/Update:
- title: Required, non-empty string
- content: Required, non-empty string
- category: Required, must be one of: general, jobs, news, scholarships, events, achievements, obituary
- priority: Optional, must be one of: low, medium, high, urgent
- status: Optional, must be one of: draft, published, archived
- publishDate: Optional, must be valid ISO 8601 date
- expiryDate: Optional, must be valid ISO 8601 date
- isPinned: Optional, boolean

Bulk Operations:
- action: Required, must be one of: publish, archive, delete, pin, unpin
- announcementIds: Required array with at least one valid MongoDB ObjectId

=============================================================================
ROLE-BASED ACCESS CONTROL
=============================================================================

PUBLIC ACCESS:
- View published announcements
- View announcement details
- Like announcements (authenticated)
- Comment on announcements (authenticated)
- Reply to comments (authenticated)

ALUMNI ACCESS:
- All public access
- View engagement summary/statistics

ADMIN/MODERATOR ACCESS:
- All alumni access
- Create, update, delete announcements
- View all announcements (including drafts)
- Access admin statistics and analytics
- Perform bulk operations
- Export announcement data

ADMIN ONLY:
- Delete announcements via bulk operations
- Delete announcements permanently

=============================================================================
ENGAGEMENT FEATURES
=============================================================================

1. LIKES SYSTEM:
   - Users can like/unlike announcements
   - Like count is tracked and displayed
   - User-specific like status is maintained

2. COMMENTS SYSTEM:
   - Hierarchical comments with replies
   - Comment threading support
   - User information populated in responses

3. VIEW TRACKING:
   - View count incremented on announcement access
   - Used for engagement analytics

4. ANALYTICS:
   - Engagement scoring system
   - Top-performing content identification
   - Category-wise performance metrics
   - Time-based activity tracking

=============================================================================
ADVANCED FEATURES
=============================================================================

1. SEARCH AND FILTERING:
   - Full-text search in title and content
   - Multi-field filtering support
   - Date range filtering
   - Status and category filtering

2. SORTING OPTIONS:
   - Sort by creation date, publish date
   - Sort by engagement metrics (views, likes, comments)
   - Sort by title alphabetically
   - Ascending/descending order support

3. BULK OPERATIONS:
   - Mass publish/archive announcements
   - Bulk pin/unpin functionality
   - Mass deletion (admin only)
   - Batch status updates

4. DATA EXPORT:
   - CSV and JSON export formats
   - Filtered data export
   - Complete announcement data
   - Engagement metrics included

5. TARGET AUDIENCE:
   - Graduation year targeting
   - Location-based targeting
   - Role-based visibility
   - Public/private announcement control

This documentation covers all announcement-related endpoints with comprehensive examples, validation rules, and role-based access control information. 